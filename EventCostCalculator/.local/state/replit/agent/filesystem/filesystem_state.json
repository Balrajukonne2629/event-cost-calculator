{"file_contents":{"src/main/java/com/eventcalculator/service/EventCostService.java":{"content":"package com.eventcalculator.service;\n\nimport com.eventcalculator.model.CostBreakdown;\nimport com.eventcalculator.model.CalculationRequest;\nimport com.eventcalculator.model.CalculationResult;\nimport org.springframework.stereotype.Service;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n@Service\npublic class EventCostService {\n    \n    private static class PriceRange {\n        double min;\n        double max;\n        \n        PriceRange(double min, double max) {\n            this.min = min;\n            this.max = max;\n        }\n        \n        double getAverage() {\n            return (min + max) / 2;\n        }\n    }\n    \n    private static class TierPricing {\n        PriceRange decorations;\n        PriceRange cateringPerPerson;\n        PriceRange musicEntertainment;\n        PriceRange photography;\n        PriceRange venueSetup;\n        PriceRange miscellaneous;\n        \n        TierPricing(PriceRange decorations, PriceRange cateringPerPerson, \n                   PriceRange musicEntertainment, PriceRange photography,\n                   PriceRange venueSetup, PriceRange miscellaneous) {\n            this.decorations = decorations;\n            this.cateringPerPerson = cateringPerPerson;\n            this.musicEntertainment = musicEntertainment;\n            this.photography = photography;\n            this.venueSetup = venueSetup;\n            this.miscellaneous = miscellaneous;\n        }\n    }\n    \n    private final Map<String, TierPricing> pricingData;\n    private final Map<String, Double> eventMultipliers;\n    \n    public EventCostService() {\n        pricingData = new HashMap<>();\n        eventMultipliers = new HashMap<>();\n        \n        pricingData.put(\"REGULAR\", new TierPricing(\n            new PriceRange(5000, 15000),\n            new PriceRange(300, 500),\n            new PriceRange(8000, 15000),\n            new PriceRange(10000, 20000),\n            new PriceRange(3000, 8000),\n            new PriceRange(2000, 5000)\n        ));\n        \n        pricingData.put(\"PREMIUM\", new TierPricing(\n            new PriceRange(15000, 35000),\n            new PriceRange(500, 800),\n            new PriceRange(15000, 30000),\n            new PriceRange(20000, 40000),\n            new PriceRange(8000, 15000),\n            new PriceRange(5000, 10000)\n        ));\n        \n        pricingData.put(\"DELUXE\", new TierPricing(\n            new PriceRange(35000, 75000),\n            new PriceRange(800, 1500),\n            new PriceRange(30000, 60000),\n            new PriceRange(40000, 80000),\n            new PriceRange(15000, 30000),\n            new PriceRange(10000, 20000)\n        ));\n        \n        eventMultipliers.put(\"BIRTHDAY\", 1.0);\n        eventMultipliers.put(\"WEDDING\", 1.8);\n        eventMultipliers.put(\"CORPORATE\", 1.3);\n        eventMultipliers.put(\"ANNIVERSARY\", 1.2);\n    }\n    \n    public CalculationResult calculateEventCost(CalculationRequest request) {\n        String tierKey = request.getServiceTier().toUpperCase();\n        String eventKey = request.getEventType().toUpperCase();\n        \n        TierPricing pricing = pricingData.get(tierKey);\n        if (pricing == null) {\n            throw new IllegalArgumentException(\"Invalid service tier: \" + request.getServiceTier());\n        }\n        \n        Double multiplier = eventMultipliers.get(eventKey);\n        if (multiplier == null) {\n            throw new IllegalArgumentException(\"Invalid event type: \" + request.getEventType());\n        }\n        \n        int guests = request.getGuests();\n        \n        double decorations = calculateCost(pricing.decorations, guests);\n        double catering = pricing.cateringPerPerson.getAverage() * guests;\n        double musicEntertainment = calculateCost(pricing.musicEntertainment, guests);\n        double photography = calculateCost(pricing.photography, guests);\n        double venueSetup = calculateCost(pricing.venueSetup, guests);\n        double miscellaneous = calculateCost(pricing.miscellaneous, guests);\n        \n        CostBreakdown breakdown = new CostBreakdown(\n            decorations, catering, musicEntertainment,\n            photography, venueSetup, miscellaneous, multiplier\n        );\n        \n        return new CalculationResult(guests, request.getEventType(), request.getServiceTier(), breakdown);\n    }\n    \n    private double calculateCost(PriceRange range, int guests) {\n        double baseCost = range.getAverage();\n        \n        double guestFactor = 1.0 + ((guests - 100) / 1000.0);\n        guestFactor = Math.max(0.8, Math.min(1.3, guestFactor));\n        \n        return baseCost * guestFactor;\n    }\n    \n    public String formatIndianCurrency(double amount) {\n        long intAmount = Math.round(amount);\n        String numStr = String.valueOf(intAmount);\n        \n        if (numStr.length() <= 3) {\n            return \"₹\" + numStr;\n        }\n        \n        StringBuilder result = new StringBuilder();\n        int len = numStr.length();\n        \n        result.append(numStr.substring(len - 3));\n        int remaining = len - 3;\n        \n        while (remaining > 0) {\n            int chunkSize = Math.min(2, remaining);\n            result.insert(0, \",\");\n            result.insert(0, numStr.substring(remaining - chunkSize, remaining));\n            remaining -= chunkSize;\n        }\n        \n        return \"₹\" + result.toString();\n    }\n}\n","size_bytes":5318},"src/main/java/com/eventcalculator/controller/EventController.java":{"content":"package com.eventcalculator.controller;\n\nimport com.eventcalculator.model.CalculationRequest;\nimport com.eventcalculator.model.CalculationResult;\nimport com.eventcalculator.service.EventCostService;\nimport jakarta.validation.Valid;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.validation.BindingResult;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.PostMapping;\n\n@Controller\npublic class EventController {\n    \n    @Autowired\n    private EventCostService eventCostService;\n    \n    @GetMapping(\"/\")\n    public String index(Model model) {\n        model.addAttribute(\"calculationRequest\", new CalculationRequest());\n        return \"index\";\n    }\n    \n    @PostMapping(\"/calculate\")\n    public String calculate(@Valid @ModelAttribute(\"calculationRequest\") CalculationRequest request,\n                          BindingResult bindingResult,\n                          Model model) {\n        if (bindingResult.hasErrors()) {\n            return \"index\";\n        }\n        \n        try {\n            CalculationResult result = eventCostService.calculateEventCost(request);\n            model.addAttribute(\"result\", result);\n            model.addAttribute(\"service\", eventCostService);\n            model.addAttribute(\"calculationRequest\", request);\n            return \"index\";\n        } catch (IllegalArgumentException e) {\n            model.addAttribute(\"error\", e.getMessage());\n            return \"index\";\n        }\n    }\n}\n","size_bytes":1671},"src/main/java/com/eventcalculator/model/CalculationResult.java":{"content":"package com.eventcalculator.model;\n\npublic class CalculationResult {\n    private int guests;\n    private String eventType;\n    private String serviceTier;\n    private CostBreakdown costBreakdown;\n    \n    public CalculationResult() {}\n    \n    public CalculationResult(int guests, String eventType, String serviceTier, CostBreakdown costBreakdown) {\n        this.guests = guests;\n        this.eventType = eventType;\n        this.serviceTier = serviceTier;\n        this.costBreakdown = costBreakdown;\n    }\n    \n    public int getGuests() { return guests; }\n    public void setGuests(int guests) { this.guests = guests; }\n    \n    public String getEventType() { return eventType; }\n    public void setEventType(String eventType) { this.eventType = eventType; }\n    \n    public String getServiceTier() { return serviceTier; }\n    public void setServiceTier(String serviceTier) { this.serviceTier = serviceTier; }\n    \n    public CostBreakdown getCostBreakdown() { return costBreakdown; }\n    public void setCostBreakdown(CostBreakdown costBreakdown) { this.costBreakdown = costBreakdown; }\n}\n","size_bytes":1090},"replit.md":{"content":"# Event Cost Calculator\n\n## Overview\n\nThis is a Spring Boot web application designed for calculating costs for Indian events and celebrations. The application provides a user-friendly interface for event planners to estimate costs based on the number of guests and event type. Built with server-side rendering using Thymeleaf templates, it offers a modern, responsive design with gradient-based UI styling optimized for professional event planning scenarios.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Technology Stack**: Thymeleaf server-side templating with custom CSS\n- **Rationale**: Server-side rendering chosen for simplicity and SEO benefits, eliminating the need for complex client-side state management\n- **UI Design Pattern**: Form-based interaction with radio button selection for event types\n- **Styling Approach**: CSS custom properties (variables) for consistent theming with gradient-based modern design\n- **Responsive Design**: Mobile-first approach with viewport meta tags and flexible layouts\n\n**Key Design Decisions**:\n- Google Fonts (Inter) integration for professional typography\n- Custom CSS animations (fadeInDown) for enhanced user experience\n- Dark theme with gradient accents for visual appeal\n- Form validation feedback with error message display\n\n### Backend Architecture\n\n**Framework**: Spring Boot with Spring MVC\n- **Rationale**: Spring Boot provides rapid development with minimal configuration, ideal for web applications with form processing\n- **Template Engine**: Thymeleaf for server-side rendering\n  - **Pros**: Type-safe template binding, natural templating, seamless Spring integration\n  - **Cons**: Server-side rendering may have higher latency than client-side alternatives\n  - **Alternative Considered**: Client-side frameworks like React - rejected for simplicity\n\n**Application Structure**:\n- MVC pattern with controllers handling form submissions\n- Data binding using Spring's form backing objects (`calculationRequest`)\n- Validation framework for input constraints (guests: 10-500 range)\n- Error handling with model attributes for user feedback\n\n**Event Type System**:\n- Four event types: BIRTHDAY (1.0x), WEDDING (1.8x), CORPORATE (1.3x), ANNIVERSARY (1.2x)\n- Event type multipliers applied to all cost components\n- Three service tiers: REGULAR, PREMIUM, DELUXE with distinct pricing ranges\n- Extensible design for additional event types and tiers\n\n### Data Management\n\n**Current Implementation**: No persistent data storage\n- Form data processed in-memory for immediate calculation\n- Session-based or request-scoped data handling\n- **Rationale**: Calculator use-case doesn't require data persistence; keeps architecture simple\n\n**Future Considerations**: \n- If history or saved calculations needed, could integrate database layer\n- Current stateless design allows easy horizontal scaling\n\n### Request Flow\n\n1. GET request renders form with Thymeleaf template\n2. User inputs data (guests: 10-500, event type: Birthday/Wedding/Corporate/Anniversary, service tier: Regular/Premium/Deluxe)\n3. POST request to `/calculate` endpoint\n4. Server-side validation checks constraints\n5. EventCostService calculates costs with tier-based pricing and event multipliers\n6. Cost breakdown includes: Decorations, Catering, Music & Entertainment, Photography, Venue Setup, Miscellaneous\n7. Results formatted in Indian Rupees (₹1,50,000 style) with percentage breakdowns\n8. Template renders detailed results with icons and total cost or validation errors\n\n### Pricing Structure\n\n**Regular Tier**: Decorations ₹5k-15k, Catering ₹300-500/person, Music ₹8k-15k, Photography ₹10k-20k, Venue ₹3k-8k, Misc ₹2k-5k\n**Premium Tier**: Decorations ₹15k-35k, Catering ₹500-800/person, Music ₹15k-30k, Photography ₹20k-40k, Venue ₹8k-15k, Misc ₹5k-10k  \n**Deluxe Tier**: Decorations ₹35k-75k, Catering ₹800-1500/person, Music ₹30k-60k, Photography ₹40k-80k, Venue ₹15k-30k, Misc ₹10k-20k\n\nEach cost uses average of range with guest-based scaling factor (0.8x-1.3x) for fixed costs, then multiplied by event type factor.\n\n## External Dependencies\n\n### Frontend Dependencies\n\n**Google Fonts API**\n- **Purpose**: Professional typography (Inter font family)\n- **Integration**: CDN-based font loading with preconnect optimization\n- **Weights Used**: 300, 400, 500, 600, 700 for design flexibility\n\n### Backend Dependencies\n\n**Spring Boot Framework**\n- **Spring Web MVC**: Web layer and request handling\n- **Spring Boot Starter Thymeleaf**: Template engine integration\n- **Spring Validation**: Form validation framework\n\n**Build System**: Maven (implied by target/classes structure)\n- Compiles Java sources\n- Manages dependencies\n- Packages static resources and templates\n\n### Static Resources\n\n**CSS Framework**: Custom CSS (no external CSS framework)\n- Located in `/static/css/` directory\n- Served directly by Spring Boot's static resource handling\n- No build pipeline required (vanilla CSS)\n\n**Resource Structure**:\n- Templates: `src/main/resources/templates/`\n- Static assets: `src/main/resources/static/css/`\n- Compiled output: `target/classes/`","size_bytes":5189},"src/main/java/com/eventcalculator/EventCostCalculatorApplication.java":{"content":"package com.eventcalculator;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class EventCostCalculatorApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(EventCostCalculatorApplication.class, args);\n    }\n}\n","size_bytes":348},"src/main/java/com/eventcalculator/model/CostBreakdown.java":{"content":"package com.eventcalculator.model;\n\npublic class CostBreakdown {\n    private double decorations;\n    private double catering;\n    private double musicEntertainment;\n    private double photography;\n    private double venueSetup;\n    private double miscellaneous;\n    private double subtotal;\n    private double eventTypeMultiplier;\n    private double totalCost;\n    \n    private double decorationsPercentage;\n    private double cateringPercentage;\n    private double musicPercentage;\n    private double photographyPercentage;\n    private double venuePercentage;\n    private double miscPercentage;\n    \n    public CostBreakdown() {}\n    \n    public CostBreakdown(double decorations, double catering, double musicEntertainment, \n                        double photography, double venueSetup, double miscellaneous,\n                        double eventTypeMultiplier) {\n        this.decorations = decorations;\n        this.catering = catering;\n        this.musicEntertainment = musicEntertainment;\n        this.photography = photography;\n        this.venueSetup = venueSetup;\n        this.miscellaneous = miscellaneous;\n        this.eventTypeMultiplier = eventTypeMultiplier;\n        \n        this.subtotal = decorations + catering + musicEntertainment + \n                       photography + venueSetup + miscellaneous;\n        this.totalCost = subtotal * eventTypeMultiplier;\n        \n        calculatePercentages();\n    }\n    \n    private void calculatePercentages() {\n        if (totalCost > 0) {\n            decorationsPercentage = (decorations * eventTypeMultiplier / totalCost) * 100;\n            cateringPercentage = (catering * eventTypeMultiplier / totalCost) * 100;\n            musicPercentage = (musicEntertainment * eventTypeMultiplier / totalCost) * 100;\n            photographyPercentage = (photography * eventTypeMultiplier / totalCost) * 100;\n            venuePercentage = (venueSetup * eventTypeMultiplier / totalCost) * 100;\n            miscPercentage = (miscellaneous * eventTypeMultiplier / totalCost) * 100;\n        }\n    }\n    \n    public double getDecorations() { return decorations; }\n    public void setDecorations(double decorations) { this.decorations = decorations; }\n    \n    public double getCatering() { return catering; }\n    public void setCatering(double catering) { this.catering = catering; }\n    \n    public double getMusicEntertainment() { return musicEntertainment; }\n    public void setMusicEntertainment(double musicEntertainment) { this.musicEntertainment = musicEntertainment; }\n    \n    public double getPhotography() { return photography; }\n    public void setPhotography(double photography) { this.photography = photography; }\n    \n    public double getVenueSetup() { return venueSetup; }\n    public void setVenueSetup(double venueSetup) { this.venueSetup = venueSetup; }\n    \n    public double getMiscellaneous() { return miscellaneous; }\n    public void setMiscellaneous(double miscellaneous) { this.miscellaneous = miscellaneous; }\n    \n    public double getSubtotal() { return subtotal; }\n    public void setSubtotal(double subtotal) { this.subtotal = subtotal; }\n    \n    public double getEventTypeMultiplier() { return eventTypeMultiplier; }\n    public void setEventTypeMultiplier(double eventTypeMultiplier) { this.eventTypeMultiplier = eventTypeMultiplier; }\n    \n    public double getTotalCost() { return totalCost; }\n    public void setTotalCost(double totalCost) { this.totalCost = totalCost; }\n    \n    public double getDecorationsPercentage() { return decorationsPercentage; }\n    public double getCateringPercentage() { return cateringPercentage; }\n    public double getMusicPercentage() { return musicPercentage; }\n    public double getPhotographyPercentage() { return photographyPercentage; }\n    public double getVenuePercentage() { return venuePercentage; }\n    public double getMiscPercentage() { return miscPercentage; }\n}\n","size_bytes":3885},"src/main/resources/static/css/style.css":{"content":":root {\n    --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    --secondary-gradient: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);\n    --success-gradient: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);\n    --background: #0f0f1e;\n    --card-bg: #1a1a2e;\n    --card-border: rgba(255, 255, 255, 0.1);\n    --text-primary: #ffffff;\n    --text-secondary: #a0aec0;\n    --input-bg: #16213e;\n    --input-border: rgba(255, 255, 255, 0.15);\n    --shadow: 0 20px 60px rgba(0, 0, 0, 0.3);\n    --shadow-hover: 0 30px 80px rgba(0, 0, 0, 0.4);\n}\n\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\n    background: var(--background);\n    color: var(--text-primary);\n    line-height: 1.6;\n    min-height: 100vh;\n    background-image: \n        radial-gradient(circle at 20% 30%, rgba(102, 126, 234, 0.1) 0%, transparent 50%),\n        radial-gradient(circle at 80% 70%, rgba(118, 75, 162, 0.1) 0%, transparent 50%);\n}\n\n.container {\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 2rem 1rem;\n}\n\n.header {\n    text-align: center;\n    margin-bottom: 3rem;\n    animation: fadeInDown 0.8s ease-out;\n}\n\n.title {\n    font-size: 3rem;\n    font-weight: 700;\n    background: var(--primary-gradient);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n    margin-bottom: 0.5rem;\n}\n\n.subtitle {\n    font-size: 1.125rem;\n    color: var(--text-secondary);\n    font-weight: 400;\n}\n\n.main-content {\n    display: grid;\n    grid-template-columns: 1fr;\n    gap: 2rem;\n}\n\n@media (min-width: 768px) {\n    .main-content {\n        grid-template-columns: 1fr 1fr;\n    }\n}\n\n.form-card,\n.result-card {\n    background: var(--card-bg);\n    border-radius: 24px;\n    padding: 2rem;\n    border: 1px solid var(--card-border);\n    box-shadow: var(--shadow);\n    animation: fadeInUp 0.8s ease-out;\n    transition: transform 0.3s ease, box-shadow 0.3s ease;\n}\n\n.form-card:hover,\n.result-card:hover {\n    transform: translateY(-5px);\n    box-shadow: var(--shadow-hover);\n}\n\n.form-card h2,\n.result-card h2 {\n    font-size: 1.75rem;\n    font-weight: 600;\n    margin-bottom: 1.5rem;\n    background: var(--secondary-gradient);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n}\n\n.error-message {\n    background: rgba(245, 87, 108, 0.2);\n    border: 1px solid rgba(245, 87, 108, 0.5);\n    color: #f5576c;\n    padding: 1rem;\n    border-radius: 12px;\n    margin-bottom: 1.5rem;\n    font-weight: 500;\n}\n\n.form-group {\n    margin-bottom: 2rem;\n}\n\n.form-group label {\n    display: block;\n    font-weight: 500;\n    margin-bottom: 0.75rem;\n    color: var(--text-primary);\n    font-size: 1rem;\n}\n\n.form-group input[type=\"number\"] {\n    width: 100%;\n    padding: 1rem;\n    background: var(--input-bg);\n    border: 2px solid var(--input-border);\n    border-radius: 12px;\n    color: var(--text-primary);\n    font-size: 1rem;\n    font-family: inherit;\n    transition: all 0.3s ease;\n}\n\n.form-group input[type=\"number\"]:focus {\n    outline: none;\n    border-color: #667eea;\n    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.2);\n}\n\n.field-error {\n    color: #f5576c;\n    font-size: 0.875rem;\n    margin-top: 0.5rem;\n}\n\n.radio-group,\n.tier-group {\n    display: grid;\n    gap: 1rem;\n    grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));\n}\n\n.radio-card,\n.tier-card {\n    position: relative;\n    cursor: pointer;\n}\n\n.radio-card input,\n.tier-card input {\n    position: absolute;\n    opacity: 0;\n    width: 0;\n    height: 0;\n}\n\n.radio-content,\n.tier-content {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding: 1.25rem;\n    background: var(--input-bg);\n    border: 2px solid var(--input-border);\n    border-radius: 12px;\n    transition: all 0.3s ease;\n    text-align: center;\n}\n\n.radio-card:hover .radio-content,\n.tier-card:hover .tier-content {\n    border-color: #667eea;\n    transform: translateY(-2px);\n}\n\n.radio-card input:checked ~ .radio-content,\n.tier-card input:checked ~ .tier-content {\n    background: linear-gradient(135deg, rgba(102, 126, 234, 0.2) 0%, rgba(118, 75, 162, 0.2) 100%);\n    border-color: #667eea;\n    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.2);\n}\n\n.radio-title,\n.tier-title {\n    font-weight: 600;\n    font-size: 1rem;\n    margin-bottom: 0.25rem;\n}\n\n.radio-desc,\n.tier-price,\n.tier-desc {\n    font-size: 0.875rem;\n    color: var(--text-secondary);\n}\n\n.tier-price {\n    font-weight: 600;\n    color: #667eea;\n    margin: 0.25rem 0;\n}\n\n.btn-submit {\n    width: 100%;\n    padding: 1rem 2rem;\n    background: var(--primary-gradient);\n    color: white;\n    border: none;\n    border-radius: 12px;\n    font-size: 1.125rem;\n    font-weight: 600;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);\n}\n\n.btn-submit:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 8px 25px rgba(102, 126, 234, 0.6);\n}\n\n.btn-submit:active {\n    transform: translateY(0);\n}\n\n.result-summary {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n    gap: 1rem;\n    margin-bottom: 2rem;\n}\n\n.summary-item {\n    background: var(--input-bg);\n    padding: 1rem;\n    border-radius: 12px;\n    text-align: center;\n}\n\n.summary-label {\n    display: block;\n    font-size: 0.875rem;\n    color: var(--text-secondary);\n    margin-bottom: 0.5rem;\n}\n\n.summary-value {\n    display: block;\n    font-size: 1.125rem;\n    font-weight: 600;\n    color: var(--text-primary);\n}\n\n.cost-items {\n    margin-bottom: 2rem;\n}\n\n.cost-item {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 1rem;\n    background: var(--input-bg);\n    border-radius: 12px;\n    margin-bottom: 0.75rem;\n    transition: all 0.3s ease;\n}\n\n.cost-item:hover {\n    background: rgba(102, 126, 234, 0.1);\n    transform: translateX(5px);\n}\n\n.cost-header {\n    display: flex;\n    align-items: center;\n    gap: 0.75rem;\n}\n\n.cost-icon {\n    font-size: 1.5rem;\n}\n\n.cost-name {\n    font-weight: 500;\n}\n\n.cost-details {\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n}\n\n.cost-amount {\n    font-weight: 600;\n    font-size: 1.125rem;\n}\n\n.cost-percent {\n    font-size: 0.875rem;\n    color: var(--text-secondary);\n    background: rgba(102, 126, 234, 0.2);\n    padding: 0.25rem 0.75rem;\n    border-radius: 20px;\n}\n\n.total-cost {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 1.5rem;\n    background: var(--primary-gradient);\n    border-radius: 16px;\n    margin-bottom: 1rem;\n}\n\n.total-label {\n    font-size: 1.25rem;\n    font-weight: 600;\n}\n\n.total-amount {\n    font-size: 2rem;\n    font-weight: 700;\n}\n\n.multiplier-info {\n    text-align: center;\n    font-size: 0.875rem;\n    color: var(--text-secondary);\n    padding: 0.75rem;\n    background: var(--input-bg);\n    border-radius: 12px;\n}\n\n.footer {\n    text-align: center;\n    margin-top: 3rem;\n    padding-top: 2rem;\n    border-top: 1px solid var(--card-border);\n    color: var(--text-secondary);\n    font-size: 0.875rem;\n}\n\n@keyframes fadeInDown {\n    from {\n        opacity: 0;\n        transform: translateY(-30px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n@keyframes fadeInUp {\n    from {\n        opacity: 0;\n        transform: translateY(30px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n@media (max-width: 767px) {\n    .title {\n        font-size: 2rem;\n    }\n    \n    .form-card,\n    .result-card {\n        padding: 1.5rem;\n    }\n    \n    .radio-group,\n    .tier-group {\n        grid-template-columns: 1fr 1fr;\n    }\n    \n    .cost-item {\n        flex-direction: column;\n        align-items: flex-start;\n        gap: 0.75rem;\n    }\n    \n    .cost-details {\n        width: 100%;\n        justify-content: space-between;\n    }\n    \n    .total-cost {\n        flex-direction: column;\n        gap: 0.5rem;\n    }\n}\n","size_bytes":7978},"README.md":{"content":"# Event Cost Calculator\n\nA professional Spring Boot web application for calculating event costs for Indian celebrations. Built with server-side rendering using Thymeleaf templates and modern responsive design.\n\n## Features\n\n### Event Types\n- **Birthday** - Standard pricing (1.0x multiplier)\n- **Wedding** - Premium pricing (1.8x multiplier)\n- **Corporate** - Business pricing (1.3x multiplier)\n- **Anniversary** - Special pricing (1.2x multiplier)\n\n### Service Tiers\n\n#### Regular Tier (₹300-500 per person)\n- Decorations: ₹5,000-15,000\n- Catering: ₹300-500 per person\n- Music & Entertainment: ₹8,000-15,000\n- Photography: ₹10,000-20,000\n- Venue Setup: ₹3,000-8,000\n- Miscellaneous: ₹2,000-5,000\n\n#### Premium Tier (₹500-800 per person)\n- Decorations: ₹15,000-35,000\n- Catering: ₹500-800 per person\n- Music & Entertainment: ₹15,000-30,000\n- Photography: ₹20,000-40,000\n- Venue Setup: ₹8,000-15,000\n- Miscellaneous: ₹5,000-10,000\n\n#### Deluxe Tier (₹800-1,500 per person)\n- Decorations: ₹35,000-75,000\n- Catering: ₹800-1,500 per person\n- Music & Entertainment: ₹30,000-60,000\n- Photography: ₹40,000-80,000\n- Venue Setup: ₹15,000-30,000\n- Miscellaneous: ₹10,000-20,000\n\n## Technology Stack\n\n### Backend\n- **Spring Boot 3.2.0** - Application framework\n- **Spring Web** - REST controllers and web layer\n- **Spring Validation** - Form validation\n- **Thymeleaf** - Server-side templating engine\n- **Maven** - Build and dependency management\n\n### Frontend\n- **Thymeleaf Templates** - Server-side HTML rendering\n- **Custom CSS** - Modern responsive design\n- **Google Fonts (Inter)** - Professional typography\n- **CSS Animations** - Smooth transitions and effects\n\n## Project Structure\n\n```\nevent-cost-calculator/\n├── src/\n│   └── main/\n│       ├── java/com/eventcalculator/\n│       │   ├── EventCostCalculatorApplication.java\n│       │   ├── controller/\n│       │   │   └── EventController.java\n│       │   ├── service/\n│       │   │   └── EventCostService.java\n│       │   └── model/\n│       │       ├── CostBreakdown.java\n│       │       ├── CalculationRequest.java\n│       │       └── CalculationResult.java\n│       └── resources/\n│           ├── application.properties\n│           ├── templates/\n│           │   └── index.html\n│           └── static/\n│               └── css/\n│                   └── style.css\n├── pom.xml\n└── README.md\n```\n\n## Installation & Setup\n\n### Prerequisites\n- Java 17 or higher\n- Maven 3.6+\n\n### Running the Application\n\n1. **Clone the repository**\n   ```bash\n   git clone <repository-url>\n   cd event-cost-calculator\n   ```\n\n2. **Build the project**\n   ```bash\n   mvn clean install\n   ```\n\n3. **Run the application**\n   ```bash\n   mvn spring-boot:run\n   ```\n\n4. **Access the application**\n   - Open your browser and navigate to: `http://localhost:5000`\n\n## Usage\n\n1. **Enter Number of Guests**: Input the expected number of guests (10-500)\n2. **Select Event Type**: Choose from Birthday, Wedding, Corporate, or Anniversary\n3. **Choose Service Tier**: Select Regular, Premium, or Deluxe tier\n4. **Calculate**: Click the \"Calculate Cost\" button\n5. **View Results**: See detailed cost breakdown with:\n   - Individual cost components (Decorations, Catering, Music, Photography, Venue, Miscellaneous)\n   - Percentage contribution of each component\n   - Total estimated cost in Indian Rupees\n\n## Key Features\n\n### Cost Calculation Logic\n- **Per-Person Catering**: Calculated based on guest count\n- **Guest Factor Scaling**: Fixed costs adjust based on guest count (0.8x to 1.3x)\n- **Event Type Multipliers**: Applied to all costs after base calculation\n- **Percentage Breakdown**: Shows contribution of each cost component\n\n### Indian Rupee Formatting\nThe application formats currency in Indian numbering system:\n- ₹1,50,000 (1 lakh 50 thousand)\n- ₹10,00,000 (10 lakhs)\n- Comma placement at thousands and lakhs positions\n\n### Form Validation\n- Guest count must be between 10 and 500\n- Event type is required\n- Service tier is required\n- Real-time error messages displayed\n\n## Configuration\n\n### Application Properties\n```properties\nserver.port=5000\nserver.address=0.0.0.0\nspring.thymeleaf.cache=false\n```\n\n### Build Configuration\n- Maven project with Spring Boot parent POM\n- Java 17 target\n- Spring Boot DevTools for hot reload (development)\n\n## API Endpoints\n\n- `GET /` - Display the calculator form\n- `POST /calculate` - Process the calculation and display results\n\n## Design Features\n\n### Modern UI/UX\n- Dark theme with gradient backgrounds\n- Card-based layout with shadows\n- Interactive tier and event selection buttons\n- Smooth animations and transitions\n- Mobile-responsive design\n- Professional typography (Inter font)\n\n### Color Scheme\n- Primary gradient: Purple to violet\n- Secondary gradient: Pink to red\n- Success gradient: Blue to cyan\n- Dark background with card overlays\n\n## Development\n\n### Running in Development Mode\nSpring Boot DevTools is included for automatic restarts during development:\n```bash\nmvn spring-boot:run\n```\n\n### Building for Production\n```bash\nmvn clean package\njava -jar target/event-cost-calculator-1.0.0.jar\n```\n\n## Future Enhancements\n\n- Add automated tests for pricing logic\n- Implement cost history tracking\n- Add PDF export functionality\n- Create admin panel for pricing configuration\n- Email quotation system\n- Multi-language support\n- Dark/Light theme toggle\n\n## License\n\nThis project is created for event planning and cost estimation purposes.\n\n## Support\n\nFor issues or questions, please contact the development team or create an issue in the repository.\n","size_bytes":5752},"src/main/java/com/eventcalculator/model/CalculationRequest.java":{"content":"package com.eventcalculator.model;\n\nimport jakarta.validation.constraints.Max;\nimport jakarta.validation.constraints.Min;\nimport jakarta.validation.constraints.NotBlank;\n\npublic class CalculationRequest {\n    @Min(value = 10, message = \"Number of guests must be at least 10\")\n    @Max(value = 500, message = \"Number of guests cannot exceed 500\")\n    private int guests;\n    \n    @NotBlank(message = \"Event type is required\")\n    private String eventType;\n    \n    @NotBlank(message = \"Service tier is required\")\n    private String serviceTier;\n    \n    public CalculationRequest() {}\n    \n    public CalculationRequest(int guests, String eventType, String serviceTier) {\n        this.guests = guests;\n        this.eventType = eventType;\n        this.serviceTier = serviceTier;\n    }\n    \n    public int getGuests() { return guests; }\n    public void setGuests(int guests) { this.guests = guests; }\n    \n    public String getEventType() { return eventType; }\n    public void setEventType(String eventType) { this.eventType = eventType; }\n    \n    public String getServiceTier() { return serviceTier; }\n    public void setServiceTier(String serviceTier) { this.serviceTier = serviceTier; }\n}\n","size_bytes":1190}},"version":2}